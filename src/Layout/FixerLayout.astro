---
// Import the detailed JSON data for the fixer
const { data } = Astro.props
import MainLayout from "./MainLayout.astro";

// Correctly access the main profile object from the JSON
const profile = data.fixerProfile;

// Destructure all the necessary data for easier use in the template
const {
    title,
    image,
    aliases,
    status,
    primaryTerritory,
    biography,
    fixerRatings,
    advantages,
    legendaryGig,
    recentGigDetails
} = profile;

// Determine status class for dynamic styling
const statusClass = status.toLowerCase().includes('deceased') ? 'status-deceased' : 'status-active';
---

<MainLayout>
    <div class="dossier-container">
        <!-- Holographic Grid Overlay -->
        <div class="grid-overlay"></div>

        <!-- Main Header -->
        <header class="dossier-main-header">
            <div class="glitch-wrapper">
                <h1 class="glitch" data-text={title}>{title}</h1>
            </div>
            <div class="header-sub-details">
                <span class="detail-tag"><strong>ALIASES:</strong> {aliases.join(' // ')}</span>
                <span class="detail-tag"><strong>STATUS:</strong> <span class={`status-tag ${statusClass}`}>{status}</span></span>
                <span class="detail-tag"><strong>TERRITORY:</strong> {primaryTerritory}</span>
            </div>
        </header>

        <!-- Main Content Grid -->
        <div class="dossier-grid">
            <!-- Left Column: At-a-Glance Data -->
            <aside class="left-column">
                <div class="fixer-image-container">
                    <img src={image} alt={`Dossier photo of ${title}`} />
                </div>

                <div class="data-block">
                    <h2 class="block-title"> FIXER_RATINGS</h2>
                    <div class="ratings-container">
                        {Object.entries(fixerRatings).map(([key, value]) => {
                            const [rating] = value.match(/\d+/) || [0];
                            const label = key.replace(/([A-Z])/g, ' $1').toUpperCase();
                            const percentage = (parseInt(rating) / 10) * 100;
                            return (
                                <div class="rating-item">
                                    <span class="rating-label">{label}</span>
                                    <div class="rating-bar-bg">
                                        <div class="rating-bar-fill" style={`width: ${percentage}%`}></div>
                                    </div>
                                    <span class="rating-value">{value.split(' ')[0]}</span>
                                </div>
                            )
                        })}
                    </div>
                </div>

                <div class="data-block">
                    <h2 class="block-title"> ADVANTAGES</h2>
                    <ul class="advantages-list strengths">
                        {advantages.strengths.map(strength => <li>{strength}</li>)}
                    </ul>
                    <h2 class="block-title weaknesses-title">WEAKNESSES</h2>
                    <ul class="advantages-list weaknesses">
                        {advantages.weaknesses.map(weakness => <li>{weakness}</li>)}
                    </ul>
                </div>
            </aside>

            <!-- Right Column: Detailed Intel -->
            <section class="right-column">
                <div class="data-block">
                    <h2 class="block-title"> BIOGRAPHICAL_INTEL_STREAM</h2>
                    <div class="biography-text">
                        <h3>// ORIGINS</h3>
                        <p>{biography.earlyLife}</p>
                        <h3>// RISE_TO_PROMINENCE</h3>
                        <p>{biography.riseAsFixer}</p>
                        <h3>// MODUS_OPERANDI</h3>
                        <p>{biography.modusOperandi}</p>
                    </div>
                </div>

                <!-- LEGENDARY GIG SECTION -->
                {legendaryGig && (
                    <div class="data-block">
                        <h2 class="block-title legendary-title"> LEGENDARY_GIG_RECORD</h2>
                        <div class="legendary-gig-entry">
                            <div class="log-header">
                                <h3>{legendaryGig.gigTitle}</h3>
                                <span class="log-date">// DATE: {legendaryGig.date}</span>
                            </div>
                            <div class="log-body">
                                <p><strong>OBJECTIVE:</strong> {legendaryGig.objective}</p>
                                <p><strong>OUTCOME:</strong> {legendaryGig.outcome}</p>
                                <p><strong>REPUTATION_IMPACT:</strong> {legendaryGig.reputationImpact}</p>
                                <blockquote class="merc-feedback">
                                    <span class="feedback-label">// MERC_TESTIMONIAL</span>
                                    {legendaryGig.mercFeedback}
                                </blockquote>
                                <div class="log-footer">
                                    <span class="client-info"><strong>HIRED_ASSETS:</strong> {Array.isArray(legendaryGig.hiredMercs) ? legendaryGig.hiredMercs.join(', ') : legendaryGig.hiredMercs}</span>
                                    <span class="payout-info legendary-payout"><strong>PAYOUT:</strong> {legendaryGig.payout}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                )}
                
                <div class="data-block">
                    <h2 class="block-title"> RECENT_GIG_LOG</h2>
                    <div class="gig-log">
                        {recentGigDetails.map(gig => (
                            <div class="gig-log-entry">
                                <div class="log-header">
                                    <h3>{gig.gigTitle}</h3>
                                    <span class="log-date">// {gig.date}</span>
                                </div>
                                <div class="log-body">
                                    <p><strong>OBJECTIVE:</strong> {gig.objective}</p>
                                    <p><strong>OUTCOME:</strong> {gig.outcome}</p>
                                    <blockquote class="merc-feedback">
                                        <span class="feedback-label">// MERC_FEEDBACK</span>
                                        {gig.mercFeedback}
                                    </blockquote>
                                    <div class="log-footer">
                                        <span class="client-info"><strong>CLIENT:</strong> [ENCRYPTED]</span>
                                        <span class="payout-info"><strong>PAYOUT:</strong> {gig.payout}</span>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </section>
        </div>
    </div>
</MainLayout>

<style is:global>
    @import url('https://fonts.googleapis.com/css2?family=Rajdhani:wght@400;500;700&family=Orbitron:wght@700;900&display=swap');

    :root {
        --color-background: #0a0a14;
        --color-text: #c0c8e0;
        --color-text-dark: #687394;
        --color-border: #2a3457;
        --color-primary: #00f0ff; /* Cyan */
        --color-secondary: #fcee0a; /* Yellow */
        --color-accent: #ff0054; /* Magenta */
        --color-success: #00ff85; /* Green */
        --color-danger: #ef4444; /* Red */
        --font-primary: 'Orbitron', sans-serif;
        --font-secondary: 'Rajdhani', sans-serif;
    }

    .dossier-container {
        width: 100%;
        background-color: black;
        border: 2px solid var(--color-border);
        padding: 2rem 3rem;
        position: relative;
        overflow: hidden;
        font-family: var(--font-secondary);
        color: var(--color-text);
        box-shadow: 0 0 40px rgba(0, 240, 255, 0.2);
    }
    
    .grid-overlay {
        position: absolute;
        top: 0; left: 0;
        width: 100%; height: 100%;
        background-image: 
            linear-gradient(var(--color-border) 1px, transparent 1px), 
            linear-gradient(90deg, var(--color-border) 1px, transparent 1px);
        background-size: 50px 50px;
        opacity: 0.1;
        animation: pan-grid 60s linear infinite;
        pointer-events: none;
    }
    @keyframes pan-grid {
        0% { background-position: 0 0; }
        100% { background-position: 500px 500px; }
    }

    /* --- HEADER --- */
    .dossier-main-header {
        border-bottom: 2px solid var(--color-primary);
        padding-bottom: 1.5rem;
        margin-bottom: 3rem;
        text-align: center;
    }
    .glitch-wrapper {
        position: relative;
        margin: 0 auto;
        display: inline-block;
    }
    .glitch {
        font-family: var(--font-primary);
        font-size: 5rem;
        font-weight: 900;
        text-transform: uppercase;
        letter-spacing: 4px;
        color: var(--color-secondary);
        text-shadow: 0 0 10px var(--color-secondary), 0 0 20px var(--color-secondary);
        position: relative;
        animation: glitch-scan 8s infinite linear;
    }
    .glitch:before, .glitch:after {
        content: attr(data-text);
        position: absolute;
        top: 0; left: 0;
        width: 100%; height: 100%;
        background: var(--color-background);
        overflow: hidden;
        clip: rect(0, 900px, 0, 0);
    }
    .glitch:before {
        left: 2px;
        text-shadow: -2px 0 var(--color-accent);
        animation: glitch-anim-1 2s infinite linear alternate-reverse;
    }
    .glitch:after {
        left: -2px;
        text-shadow: -2px 0 var(--color-primary), 2px 2px var(--color-accent);
        animation: glitch-anim-2 3s infinite linear alternate-reverse;
    }

    @keyframes glitch-anim-1 { 0%, 100% { clip: rect(44px, 9999px, 45px, 0); } 50% { clip: rect(23px, 9999px, 92px, 0); } }
    @keyframes glitch-anim-2 { 0%, 100% { clip: rect(65px, 9999px, 100px, 0); } 50% { clip: rect(35px, 9999px, 80px, 0); } }
    @keyframes glitch-scan { 0%, 100% { transform: translateY(0); } 50% { transform: translateY(-5px); } }

    .header-sub-details { display: flex; flex-wrap: wrap; gap: 2rem; margin-top: 1.5rem; justify-content: center; }
    .detail-tag {
        font-size: 1.1rem; text-transform: uppercase;
        letter-spacing: 1.5px;
        color: var(--color-text-dark);
    }
    .detail-tag strong { color: var(--color-text); font-weight: 700; }
    
    .status-tag {
        font-weight: 700;
        padding: 0.2rem 0.5rem;
        text-shadow: 0 0 5px;
    }
    .status-active { color: var(--color-success); animation: pulse-green 2s infinite; }
    .status-deceased { color: var(--color-danger); animation: pulse-red 2s infinite; }
    @keyframes pulse-green { 0%, 100% { opacity: 1; } 50% { opacity: 0.7; } }
    @keyframes pulse-red { 0%, 100% { opacity: 1; } 50% { opacity: 0.7; } }

    /* --- LAYOUT & COLUMNS --- */
    .dossier-grid { display: grid; grid-template-columns: 380px 1fr; gap: 3rem; }

    .fixer-image-container {
        width: 100%; margin-bottom: 2rem;
        border: 2px solid var(--color-primary);
        clip-path: polygon(0 0, 100% 0, 100% calc(100% - 25px), calc(100% - 25px) 100%, 0 100%);
        position: relative;
        background: var(--color-primary);
    }
    .fixer-image-container img {
        width: 100%; display: block; filter: grayscale(80%) contrast(120%) brightness(0.9);
        transition: filter 0.3s ease;
    }
    .fixer-image-container:hover img { filter: grayscale(0%) contrast(100%) brightness(1); }

    .data-block { margin-bottom: 2.5rem; }
    .block-title {
        font-family: var(--font-primary);
        font-size: 1.5rem; text-transform: uppercase; letter-spacing: 2px;
        color: var(--color-primary);
        text-shadow: 0 0 8px var(--color-primary);
        margin-bottom: 1.5rem;
    }

    /* --- RATINGS & ADVANTAGES --- */
    .ratings-container { display: flex; flex-direction: column; gap: 1rem; }
    .rating-item { display: grid; grid-template-columns: 120px 1fr auto; align-items: center; gap: 1rem; }
    .rating-label { font-size: 0.9rem; color: var(--color-text-dark); text-transform: uppercase; white-space: nowrap; }
    .rating-bar-bg { background: rgba(42, 52, 87, 0.5); height: 10px; clip-path: polygon(0 0, 100% 0, 100% 100%, 5px 100%, 0 100%); }
    .rating-bar-fill {
        background: var(--color-primary); height: 100%; box-shadow: 0 0 8px var(--color-primary);
        transition: width 0.5s ease;
    }
    .rating-item:hover .rating-bar-fill { background: var(--color-secondary); box-shadow: 0 0 8px var(--color-secondary); }
    .rating-value { font-size: 1rem; font-weight: 700; color: var(--color-text); }

    .advantages-list { list-style: none; padding-left: 1rem; margin: 0; }
    .advantages-list li {
        margin-bottom: 0.75rem; position: relative;
        padding-left: 1.5rem;
    }
    .advantages-list li::before {
        position: absolute; left: 0; top: 2px;
        font-weight: 700; font-size: 1.2rem;
        transition: transform 0.2s, text-shadow 0.2s;
    }
    .strengths li::before { content: '++'; color: var(--color-success); }
    .weaknesses li::before { content: '--'; color: var(--color-danger); }
    .weaknesses-title { margin-top: 2rem; color: var(--color-accent); text-shadow: 0 0 8px var(--color-accent); }
    .advantages-list li:hover::before { transform: translateX(5px); text-shadow: 0 0 8px; }

    /* --- RIGHT COLUMN & LOGS --- */
    .biography-text h3 {
        font-size: 1.1rem; text-transform: uppercase;
        color: var(--color-primary); letter-spacing: 1px;
        margin: 2rem 0 0.5rem 0; font-weight: 700;
    }
    .biography-text p { margin: 0; line-height: 1.7; color: var(--color-text-dark); }
    .biography-text p:first-of-type { color: var(--color-text); }

    .gig-log-entry, .legendary-gig-entry {
        border-left: 2px solid var(--color-border);
        padding-left: 2rem; margin-bottom: 3rem;
        position: relative;
    }
    .gig-log-entry::before {
        content: ''; position: absolute; left: -7px; top: 8px;
        width: 12px; height: 12px; background: var(--color-border);
        border: 2px solid var(--color-primary);
        border-radius: 50%; transition: background-color 0.3s;
    }
    .gig-log-entry:hover::before { background: var(--color-secondary); border-color: var(--color-secondary); }

    .log-header h3 {
        font-family: var(--font-secondary);
        font-size: 1.6rem; color: var(--color-text); margin: 0 0 0.5rem 0; font-weight: 700;
    }
    .log-date { color: var(--color-text-dark); font-family: monospace; }
    .log-body p { margin: 0.75rem 0; }
    .log-body strong { color: var(--color-primary); font-weight: 700; }
    
    .merc-feedback {
        margin: 1.5rem 0;
        background: rgba(42, 52, 87, 0.3);
        border-left: 3px solid var(--color-accent);
        padding: 1rem 1.5rem;
        font-style: italic;
        color: var(--color-text-dark);
    }
    .merc-feedback .feedback-label {
        display: block;
        font-style: normal;
        text-transform: uppercase;
        font-weight: 700;
        color: var(--color-accent);
        margin-bottom: 0.5rem;
    }
    .log-footer {
        display: flex; justify-content: space-between; flex-wrap: wrap; gap: 1rem;
        margin-top: 1.5rem; padding-top: 1rem;
        border-top: 1px dashed var(--color-border);
    }
    .payout-info { font-weight: 700; color: var(--color-success); text-shadow: 0 0 5px var(--color-success); }
    .client-info { color: var(--color-text-dark); }

    .legendary-title { color: var(--color-secondary); text-shadow: 0 0 8px var(--color-secondary); }
    .legendary-gig-entry {
        border: 2px solid var(--color-secondary);
        padding: 2rem;
        background: radial-gradient(circle, rgba(252, 238, 10, 0.08) 0%, rgba(252, 238, 10, 0) 70%);
        margin-top: 1.5rem;
    }
    .legendary-gig-entry .log-header h3 { color: var(--color-secondary); font-size: 2rem; }
    .legendary-payout { font-size: 1.5rem; }

    /* --- RESPONSIVE --- */
    @media (max-width: 1200px) {
        .dossier-grid { grid-template-columns: 1fr; }
        .left-column {
            display: grid; grid-template-columns: 1fr 1fr;
            gap: 3rem; align-items: start;
        }
        .fixer-image-container { grid-column: 1 / -1; }
    }
    @media (max-width: 768px) {
        .dossier-container { padding: 1.5rem; }
        .glitch { font-size: 3rem; }
        .left-column { grid-template-columns: 1fr; }
    }
</style>